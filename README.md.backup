# 🌐 Multi-Site Static Hosting with Caddy

![Caddy](https://img.shields.io/badge/Caddy-2.0-00d4aa?style=for-the-badge&logo=caddy)
![Docker](https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white)
![PHP](https://img.shields.io/badge/PHP-777BB4?style=for-the-badge&logo=php&logoColor=white)
![Security](https://img.shields.io/badge/Security-Production_Ready-orange?style=for-the-badge)

## Overview
Deploy hundreds of static sites with automatic HTTPS, monitoring, and production-ready security

[🚀 Quick Start](#-quick-start) • [📖 Documentation](#-documentation-links) • [🛡️ Security](#-security) • [📊 Monitoring](#-monitoring)

---

## 🎯 What This Does
This solution deploys **hundreds of static sites** (HTML/JS/CSS/PHP) behind a single Caddy server with:
- 🔒 **Automatic HTTPS** via Let's Encrypt
- 🛡️ **Production-ready security** with basic hardening
- 📊 **Built-in monitoring** with Prometheus metrics
- 🐳 **Containerized deployment** with Docker Compose
- ⚡ **Zero-configuration** site addition

## ✨ Key Features

| 🚀 **Feature** | 🎯 **Benefit** | 💡 **Description** |
|----------------|----------------|-------------------|
| 🔒 **Auto HTTPS** | Zero-config SSL | Automatic Let's Encrypt certificates |
| 📁 **One-folder sites** | Simple organization | Each domain gets its own folder |
| ⚡ **Zero-config hosting** | No per-site setup | On-demand TLS with automatic approval |
| 🛠️ **Simple scripts** | Easy management | Add sites with one command |
| 🐳 **Containerized** | Consistent deployment | Docker Compose for all services |
| 🛡️ **Basic security** | Production ready | Security headers, basic isolation |
| 📊 **Built-in monitoring** | Full visibility | Prometheus metrics for all services |
| 💾 **Backup system** | Data protection | Automated backup scripts |
## 📋 Requirements

| 🔧 **Requirement** | ✅ **Status** | 📝 **Description** |
|-------------------|---------------|-------------------|
| 🐳 **Docker** | Required | Docker and Docker Compose |
| 🌐 **DNS Setup** | Required | A/AAAA records pointing to server IP |
| 🔑 **Email** | Required | For Let's Encrypt certificate registration |
---

## 🚀 Quick Start
### 🎯 **Easy Way (Recommended)**

```bash
./scripts/start.sh
```
**This script automatically:**
- ✅ Copies `.env.example` to `.env` if missing
- ✅ Validates your environment configuration  
- ✅ Checks Caddyfile formatting
- ✅ Starts all services
- ✅ Verifies everything is working

---

### 🔧 **Manual Way**

| 📋 **Step** | 💻 **Command** | 🎯 **Purpose** |
|-------------|----------------|----------------|
| 1️⃣ **Setup Environment** | `cp .env.example .env` | Create configuration file |
| 2️⃣ **Configure Email** | Edit `.env` → `CADDY_EMAIL=your-email@example.com` | Set Let's Encrypt email |
| 3️⃣ **Start Services** | `./scripts/start.sh` | Launch all containers (auto-generates secrets) |
| 4️⃣ **Add Site** | `./scripts/add-site.sh example.com --www` | Create your first site |
| 5️⃣ **Configure DNS** | Point `example.com` to server IP | Enable HTTPS |

**After setup, visit:** `https://example.com` 🎉

## 📁 Project Structure

```text
🌐 multi-site-recovered/
├── 📄 .env.example              # Environment template (REQUIRED)
├── ⚙️  Caddyfile                # Caddy configuration
├── 🐳 compose.yml               # Docker services
├── 📖 README.md                 # Main documentation
├── 🛡️  SECURITY.md              # Security guide
├── 📊 monitoring/               # Monitoring setup
│   ├── 📖 README.md
│   ├── ⚙️  prometheus-config.txt
│   ├── 🔧 php-fpm.conf
│   └── 📈 grafana-dashboard.json
├── 🛠️  scripts/                 # Management scripts
│   ├── ➕ add-site.sh           # Add new sites
│   ├── 💾 backup.sh             # Create backups
│   ├── 🌐 cf-set-dns.sh         # Cloudflare DNS setup
│   ├── ⚡ fix-udp-buffers.sh    # Performance optimization
│   ├── 🔧 format-caddyfile.sh   # Format Caddyfile
│   ├── 🔐 generate-secret.sh    # Generate secure secrets
│   ├── 📊 setup-monitoring-simple.sh # Setup monitoring
│   ├── 🚀 start.sh              # Start all services
│   ├── 📋 status.sh             # Check system status
│   └── ✅ validate.sh           # Validate configuration
├── 🐳 ask/                      # Domain approval service
│   ├── 🐍 app.py
│   └── 🐳 Dockerfile
└── 🌐 sites/                    # Your websites
    ├── 📋 _template/            # Site template
    │   ├── 📄 index.html
    │   ├── 🐘 index.php
    │   ├── 🐘 info.php
    │   ├── 🎨 main.js
    │   └── 💄 styles.css
    └── 🌍 example.com/          # Example site
        ├── 📄 index.html
        ├── 🐘 index.php
        ├── 🐘 info.php
        ├── 🎨 main.js
        └── 💄 styles.css
```
## ⚙️ How It Works

| 🔄 **Process** | 🎯 **What Happens** | 🛡️ **Security** |
|----------------|---------------------|-----------------|
| 🌐 **Request Arrives** | Caddy receives request for `example.com` | Validates hostname |
| 📁 **File Serving** | Serves content from `sites/example.com/` | Read-only access |
| 🔒 **Certificate Check** | Checks if SSL cert exists | Automatic renewal |
| ✅ **Approval Process** | Asks `ask` service for domain approval | Directory must exist |
| 🎉 **Response** | Serves content with HTTPS | Security headers applied |
### 🔧 **Key Components**

| 🐳 **Service** | 🎯 **Purpose** | 🔒 **Security Level** |
|----------------|----------------|----------------------|
| 🌐 **Caddy** | Web server & HTTPS | High - Security headers, CSP |
| ✅ **Ask Service** | Domain approval | Medium - Internal only |
| 🐘 **PHP-FPM** | PHP processing | High - Read-only mounts |
| 📊 **Node Exporter** | System metrics | High - Internal network |
| 📈 **PHP-FPM Exporter** | PHP metrics | High - Internal network |
## 🛡️ Security

| 🛡️ **Security Layer** | ✅ **Status** | 🎯 **Protection** |
|----------------------|---------------|------------------|
| 🔒 **HTTPS/TLS** | ✅ Active | Automatic Let's Encrypt |
| 🛡️ **Security Headers** | ✅ Active | HSTS, CSP, X-Frame-Options |
| 🚫 **Information Disclosure** | ✅ Blocked | PHP info disabled, paths hidden |
| 🔐 **Basic Authentication** | ⚠️ Limited | Simple auth for monitoring |
| 🌐 **Network Isolation** | ✅ Active | Internal networks only |
| 📁 **Read-only Mounts** | ✅ Active | File system protection |
| 📊 **Health Monitoring** | ✅ Active | Service health checks |
> ⚠️ **Security Note**: This setup provides **production-ready security** suitable for small to medium projects. For enterprise environments, additional hardening (secrets management, advanced authentication, SIEM integration) would be required.

### 🔑 **Security Configuration**

| 🔧 **Component** | 🔐 **Authentication** | 📍 **Access** |
|------------------|----------------------|---------------|
| **Caddy Metrics** (2019) | Basic Auth | `metrics_user:monitoring_password_2024` |
| **Ask Service** (8080) | Bearer Token | SHA256(`METRICS_SECRET`) |
**Required `.env` configuration:**
```bash
# 📧 Caddy email for SSL certificates (REQUIRED)
CADDY_EMAIL=your-email@example.com

# 🔐 Metrics authentication secret (AUTO-GENERATED)
METRICS_SECRET=change-this-secret-key-here  # Will be auto-generated by start.sh
```

> 📖 **For complete security documentation, see [SECURITY.md](SECURITY.md)**

## 🎨 Per-Site Customization

| 🎯 **Customization** | 💡 **Use Case** | 🔧 **Implementation** |
|---------------------|-----------------|----------------------|
| 📁 **Static Files** | Most sites | Drop files into domain folder |
| 🔄 **Redirects** | Special routing | Add per-host `handle` blocks |
| 🛡️ **Custom Headers** | Security policies | Extend Caddyfile configuration |
| 🎨 **Custom CSS/JS** | Styling & functionality | Add to site's folder |
---

## 🧪 Staging Certificates (Optional)
**For testing without Let's Encrypt rate limits:**
```caddy
# Add to :443 block in Caddyfile
tls {
  issuer acme {
    ca https://acme-staging-v02.api.letsencrypt.org/directory
  }
}
```
**Apply changes:**
```bash
docker compose restart caddy
```

## 💾 Backups

```bash
./scripts/backup.sh
```
### 📦 **What Gets Backed Up**

| 📁 **Component** | 🎯 **Purpose** | 📍 **Location** |
|------------------|----------------|-----------------|
| 🌐 **All Sites** | Website content | `sites/` directory |
| ⚙️ **Configuration** | Caddy & Docker configs | `Caddyfile`, `compose.yml` |
| 🔒 **SSL Certificates** | Let's Encrypt certs | Caddy Docker volumes |
| 🐳 **Docker Volumes** | Persistent data | Caddy state & config |
**Backup storage:** `./backups/` with timestamps  
**Format:** Compressed `.tar.gz` archives

> ⚠️ **Note**: This is a manual backup system. For production, consider automated backups with cron jobs or external solutions.

## ✅ Validation

```bash
./scripts/validate.sh
```
### 🕐 **When to Run Validation**

| ⏰ **Timing** | 🎯 **Purpose** | ✅ **Checks** |
|---------------|----------------|---------------|
| 🚀 **Before startup** | Pre-flight checks | Environment, Docker, configs |
| ✏️ **After edits** | Post-change validation | `.env`, `Caddyfile` changes |
| 🔧 **Configuration** | Setup verification | All settings valid |
| 🐛 **Troubleshooting** | Issue diagnosis | System health |
| 📅 **Regular checks** | Maintenance | Ongoing validation |
### 🔍 **What Gets Validated**

| ✅ **Check** | 🎯 **Purpose** | 📍 **Location** |
|--------------|----------------|-----------------|
| 📄 **Environment** | `.env` file exists & required variables set | Configuration |
| 🔐 **CADDY_EMAIL** | SSL certificate email configured | Let's Encrypt |
| 🔑 **METRICS_SECRET** | Monitoring authentication secret set | Security |
| ⚙️ **Caddyfile** | Syntax and formatting valid | Web server config |
| 🐳 **Docker** | Docker daemon running | Container platform |
| 🔧 **Configuration** | All settings valid | Complete setup |
## ⚡ Performance Optimization
### 🌐 **UDP Buffer Sizes (HTTP/3)**

| ⚠️ **Issue** | 🔧 **Solution** | 🎯 **Benefit** |
|--------------|-----------------|----------------|
| UDP buffer warnings | `sudo ./scripts/fix-udp-buffers.sh` | Better HTTP/3 performance |
**What the script does:**
- ✅ Sets optimal UDP buffer sizes for HTTP/3 (QUIC)
- ✅ Makes changes persistent across reboots  
- ✅ Improves performance for high-traffic sites

> 💡 **Note**: UDP warnings don't break functionality, but fixing them improves performance.

## 📊 Monitoring

```bash
sudo ./scripts/setup-monitoring-simple.sh
```
### 📈 **What You Get**

| 📊 **Metric Type** | 🎯 **What's Monitored** | 🔧 **Tool** |
|-------------------|-------------------------|-------------|
| 🖥️ **System** | RAM, CPU, disk usage | Node Exporter |
| 🌐 **Web Traffic** | Request rates, response times, errors | Caddy Metrics |
| 🐘 **PHP Performance** | Process pool status | PHP-FPM Exporter |
| ✅ **Application** | Domain approvals, service health | Ask Service |
### 🔧 **Setup Features**

- ✅ **Automatic security configuration**
- ✅ **Prometheus targets provided**
- ✅ **Grafana integration ready**
- ✅ **Internal network isolation**

**Quick status check:**
```bash
./scripts/status.sh
```

> 📖 **For detailed monitoring setup, see [monitoring/README.md](monitoring/README.md)**

## 🔧 Troubleshooting
### 🚨 **Common Issues**

| ❌ **Problem** | ✅ **Solution** | 🔧 **Command** |
|----------------|-----------------|----------------|
| 🌐 **Ports not open** | Open 80 & 443 | Firewall configuration |
| 🔍 **DNS not resolving** | Check DNS records | `dig your-domain.com` |
| ⚠️ **UDP warnings** | Fix buffer sizes | `sudo ./scripts/fix-udp-buffers.sh` |
| 🔒 **Certificate issues** | Check domain setup | See certificate section below |
### 🔍 **Diagnostic Steps**
1. **Run validation first:**
   ```bash
   ./scripts/validate.sh
   ```

2. **Check service logs:**
   ```bash
   docker compose logs -f caddy | cat
   ```

3. **Verify service status:**
   ```bash
   ./scripts/status.sh
   ```

### 🔒 **Certificate Troubleshooting**

| ✅ **Check** | 🎯 **Action** | 📍 **Location** |
|--------------|---------------|-----------------|
| 📁 **Site exists** | Ensure `sites/<domain>/` exists | `sites/example.com/index.html` |
| 🌐 **HTTP first** | Trigger redirect | `curl -I http://<domain>` |
| 🔒 **HTTPS test** | Test certificate | `curl -I https://<domain>` |
| 📝 **Check logs** | Review service logs | `docker compose logs -f caddy ask` |
### ☁️ **Cloudflare Users**

- Set SSL/TLS mode to **Full** or **Full strict**
- Consider **DNS-only** (grey cloud) while debugging
- Ensure DNS records point to your server IP

---
## 🎉 **You're All Set!**
**Your multi-site hosting solution is ready with enterprise-grade security and monitoring.**

### 📚 **Documentation Links**

- 🛡️ **[Security Guide](SECURITY.md)** - Complete security documentation
- 📊 **[Monitoring Setup](monitoring/README.md)** - Metrics and monitoring
- 🔧 **[Troubleshooting](#-troubleshooting)** - Common issues and solutions

### 🚀 **Quick Commands**

```bash
./scripts/start.sh          # Start everything
./scripts/add-site.sh domain.com  # Add new site
./scripts/status.sh         # Check status
./scripts/backup.sh         # Create backup
./scripts/generate-secret.sh # Generate secure METRICS_SECRET
./scripts/validate.sh       # Validate configuration
./scripts/format-caddyfile.sh # Format Caddyfile
./scripts/cf-set-dns.sh domain.com # Set Cloudflare DNS
```

---

**🛡️ Security Level: PRODUCTION-READY** • **📊 Monitoring: ACTIVE** • **🔒 HTTPS: AUTOMATIC**
